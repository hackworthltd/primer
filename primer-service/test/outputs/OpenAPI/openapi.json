{
    "components": {
        "schemas": {
            "Action": {
                "oneOf": [
                    {
                        "properties": {
                            "contents": {
                                "$ref": "#/components/schemas/NoInputAction"
                            },
                            "tag": {
                                "enum": [
                                    "NoInput"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag",
                            "contents"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "contents": {
                                "$ref": "#/components/schemas/InputAction"
                            },
                            "tag": {
                                "enum": [
                                    "Input"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag",
                            "contents"
                        ],
                        "type": "object"
                    }
                ]
            },
            "ApplyActionBody": {
                "properties": {
                    "option": {
                        "$ref": "#/components/schemas/Option"
                    },
                    "selection": {
                        "$ref": "#/components/schemas/Selection"
                    }
                },
                "required": [
                    "selection",
                    "option"
                ],
                "type": "object"
            },
            "CreateTypeDefBody": {
                "properties": {
                    "ctors": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "moduleName": {
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array"
                    },
                    "typeName": {
                        "type": "string"
                    }
                },
                "required": [
                    "moduleName",
                    "typeName",
                    "ctors"
                ],
                "type": "object"
            },
            "Def": {
                "properties": {
                    "name": {
                        "$ref": "#/components/schemas/GlobalName"
                    },
                    "term": {
                        "$ref": "#/components/schemas/Tree"
                    },
                    "type_": {
                        "$ref": "#/components/schemas/Tree"
                    }
                },
                "required": [
                    "name",
                    "type_"
                ],
                "type": "object"
            },
            "EvalFullResp": {
                "oneOf": [
                    {
                        "properties": {
                            "contents": {
                                "$ref": "#/components/schemas/Tree"
                            },
                            "tag": {
                                "enum": [
                                    "EvalFullRespTimedOut"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag",
                            "contents"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "contents": {
                                "$ref": "#/components/schemas/Tree"
                            },
                            "tag": {
                                "enum": [
                                    "EvalFullRespNormal"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag",
                            "contents"
                        ],
                        "type": "object"
                    }
                ]
            },
            "FreeInput": {
                "enum": [
                    "FreeNone",
                    "FreeVarName",
                    "FreeInt",
                    "FreeChar"
                ],
                "type": "string"
            },
            "GlobalName": {
                "properties": {
                    "baseName": {
                        "type": "string"
                    },
                    "qualifiedModule": {
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "qualifiedModule",
                    "baseName"
                ],
                "type": "object"
            },
            "InputAction": {
                "enum": [
                    "MakeCon",
                    "MakeInt",
                    "MakeChar",
                    "MakeVar",
                    "MakeVarSat",
                    "MakeLet",
                    "MakeLetRec",
                    "MakeLam",
                    "MakeLAM",
                    "RenamePattern",
                    "RenameLet",
                    "RenameLam",
                    "RenameLAM",
                    "MakeTCon",
                    "MakeTVar",
                    "MakeForall",
                    "RenameForall",
                    "RenameDef"
                ],
                "type": "string"
            },
            "LastModified": {
                "example": "2022-10-20T00:00:00Z",
                "format": "date-time",
                "type": "string"
            },
            "Level": {
                "enum": [
                    "Beginner",
                    "Intermediate",
                    "Expert"
                ],
                "type": "string"
            },
            "Module": {
                "properties": {
                    "defs": {
                        "items": {
                            "$ref": "#/components/schemas/Def"
                        },
                        "type": "array"
                    },
                    "editable": {
                        "type": "boolean"
                    },
                    "modname": {
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array"
                    },
                    "types": {
                        "items": {
                            "$ref": "#/components/schemas/GlobalName"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "modname",
                    "editable",
                    "types",
                    "defs"
                ],
                "type": "object"
            },
            "Name": {
                "properties": {
                    "baseName": {
                        "type": "string"
                    },
                    "qualifiedModule": {
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "baseName"
                ],
                "type": "object"
            },
            "NewSessionReq": {
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "NoInputAction": {
                "enum": [
                    "MakeCase",
                    "MakeApp",
                    "MakeAPP",
                    "MakeAnn",
                    "RemoveAnn",
                    "LetToRec",
                    "Raise",
                    "EnterHole",
                    "RemoveHole",
                    "DeleteExpr",
                    "MakeFun",
                    "AddInput",
                    "MakeTApp",
                    "RaiseType",
                    "DeleteType",
                    "DuplicateDef",
                    "DeleteDef"
                ],
                "type": "string"
            },
            "NodeBody": {
                "oneOf": [
                    {
                        "properties": {
                            "contents": {
                                "$ref": "#/components/schemas/RecordPair_NodeFlavorTextBody_Name"
                            },
                            "tag": {
                                "enum": [
                                    "TextBody"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag",
                            "contents"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "contents": {
                                "$ref": "#/components/schemas/RecordPair_NodeFlavorPrimBody_PrimCon"
                            },
                            "tag": {
                                "enum": [
                                    "PrimBody"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag",
                            "contents"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "contents": {
                                "$ref": "#/components/schemas/RecordPair_NodeFlavorBoxBody_Tree"
                            },
                            "tag": {
                                "enum": [
                                    "BoxBody"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag",
                            "contents"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "contents": {
                                "$ref": "#/components/schemas/NodeFlavorNoBody"
                            },
                            "tag": {
                                "enum": [
                                    "NoBody"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag",
                            "contents"
                        ],
                        "type": "object"
                    }
                ]
            },
            "NodeFlavorBoxBody": {
                "enum": [
                    "Pattern"
                ],
                "type": "string"
            },
            "NodeFlavorNoBody": {
                "enum": [
                    "Hole",
                    "EmptyHole",
                    "Ann",
                    "App",
                    "APP",
                    "Case",
                    "CaseWith",
                    "TEmptyHole",
                    "THole",
                    "TFun",
                    "TApp"
                ],
                "type": "string"
            },
            "NodeFlavorPrimBody": {
                "enum": [
                    "PrimCon"
                ],
                "type": "string"
            },
            "NodeFlavorTextBody": {
                "enum": [
                    "Con",
                    "Lam",
                    "LAM",
                    "Let",
                    "LetType",
                    "Letrec",
                    "PatternBind",
                    "PatternCon",
                    "TCon",
                    "TVar",
                    "TForall",
                    "TLet",
                    "GlobalVar",
                    "LocalVar"
                ],
                "type": "string"
            },
            "NodeSelection": {
                "properties": {
                    "meta": {
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808,
                        "type": "integer"
                    },
                    "nodeType": {
                        "$ref": "#/components/schemas/NodeType"
                    }
                },
                "required": [
                    "nodeType",
                    "meta"
                ],
                "type": "object"
            },
            "NodeType": {
                "enum": [
                    "BodyNode",
                    "SigNode"
                ],
                "type": "string"
            },
            "Option": {
                "properties": {
                    "context": {
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array"
                    },
                    "option": {
                        "type": "string"
                    }
                },
                "required": [
                    "option"
                ],
                "type": "object"
            },
            "Options": {
                "properties": {
                    "free": {
                        "$ref": "#/components/schemas/FreeInput"
                    },
                    "opts": {
                        "items": {
                            "$ref": "#/components/schemas/Option"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "opts",
                    "free"
                ],
                "type": "object"
            },
            "PaginatedMeta": {
                "properties": {
                    "firstPage": {
                        "exclusiveMinimum": true,
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "lastPage": {
                        "exclusiveMinimum": true,
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "nextPage": {
                        "exclusiveMinimum": true,
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "pageSize": {
                        "exclusiveMinimum": true,
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "prevPage": {
                        "exclusiveMinimum": true,
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "thisPage": {
                        "exclusiveMinimum": true,
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "totalItems": {
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "totalItems",
                    "pageSize",
                    "firstPage",
                    "thisPage",
                    "lastPage"
                ],
                "type": "object"
            },
            "Paginated_Session": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/Session"
                        },
                        "type": "array"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginatedMeta"
                    }
                },
                "required": [
                    "meta",
                    "items"
                ],
                "type": "object"
            },
            "PrimCon": {
                "oneOf": [
                    {
                        "properties": {
                            "contents": {
                                "example": "?",
                                "maxLength": 1,
                                "minLength": 1,
                                "type": "string"
                            },
                            "tag": {
                                "enum": [
                                    "PrimChar"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag",
                            "contents"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "contents": {
                                "type": "integer"
                            },
                            "tag": {
                                "enum": [
                                    "PrimInt"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag",
                            "contents"
                        ],
                        "type": "object"
                    }
                ]
            },
            "Prog": {
                "properties": {
                    "modules": {
                        "items": {
                            "$ref": "#/components/schemas/Module"
                        },
                        "type": "array"
                    },
                    "redoAvailable": {
                        "type": "boolean"
                    },
                    "selection": {
                        "$ref": "#/components/schemas/Selection"
                    },
                    "undoAvailable": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "modules",
                    "undoAvailable",
                    "redoAvailable"
                ],
                "type": "object"
            },
            "RecordPair_NodeFlavorBoxBody_Tree": {
                "properties": {
                    "fst": {
                        "$ref": "#/components/schemas/NodeFlavorBoxBody"
                    },
                    "snd": {
                        "$ref": "#/components/schemas/Tree"
                    }
                },
                "required": [
                    "fst",
                    "snd"
                ],
                "type": "object"
            },
            "RecordPair_NodeFlavorPrimBody_PrimCon": {
                "properties": {
                    "fst": {
                        "$ref": "#/components/schemas/NodeFlavorPrimBody"
                    },
                    "snd": {
                        "$ref": "#/components/schemas/PrimCon"
                    }
                },
                "required": [
                    "fst",
                    "snd"
                ],
                "type": "object"
            },
            "RecordPair_NodeFlavorTextBody_Name": {
                "properties": {
                    "fst": {
                        "$ref": "#/components/schemas/NodeFlavorTextBody"
                    },
                    "snd": {
                        "$ref": "#/components/schemas/Name"
                    }
                },
                "required": [
                    "fst",
                    "snd"
                ],
                "type": "object"
            },
            "Selection": {
                "properties": {
                    "def": {
                        "$ref": "#/components/schemas/GlobalName"
                    },
                    "node": {
                        "$ref": "#/components/schemas/NodeSelection"
                    }
                },
                "required": [
                    "def"
                ],
                "type": "object"
            },
            "Session": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UUID"
                    },
                    "lastModified": {
                        "$ref": "#/components/schemas/LastModified"
                    },
                    "name": {
                        "$ref": "#/components/schemas/SessionName"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "lastModified"
                ],
                "type": "object"
            },
            "SessionName": {
                "type": "string"
            },
            "Tree": {
                "properties": {
                    "body": {
                        "$ref": "#/components/schemas/NodeBody"
                    },
                    "childTrees": {
                        "items": {
                            "$ref": "#/components/schemas/Tree"
                        },
                        "type": "array"
                    },
                    "nodeId": {
                        "type": "string"
                    },
                    "rightChild": {
                        "$ref": "#/components/schemas/Tree"
                    }
                },
                "required": [
                    "nodeId",
                    "body",
                    "childTrees"
                ],
                "type": "object"
            },
            "UUID": {
                "example": "00000000-0000-0000-0000-000000000000",
                "format": "uuid",
                "type": "string"
            }
        }
    },
    "info": {
        "description": "A backend service implementing a pedagogic functional programming language.",
        "title": "Primer backend API",
        "version": "0.7"
    },
    "openapi": "3.0.0",
    "paths": {
        "/openapi/copy-session": {
            "post": {
                "description": "Copy the session whose ID is given in the request body to a new session, and return the new session's ID. Note that this method can be called at any time and is not part of the session-specific API, as it's not scoped by the current session ID like those methods are.",
                "operationId": "copySession",
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/UUID"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/UUID"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `body`"
                    }
                },
                "summary": "Copy a session to a new session"
            }
        },
        "/openapi/sessions": {
            "get": {
                "description": "Get a list of all sessions and their human-readable names. By default, this method returns the list of all sessions in the persistent database, but optionally it can return just the list of all sessions in memory, which is mainly useful for testing. Note that in a production system, this endpoint should obviously be authentication-scoped and only return the list of sessions that the caller is authorized to see.",
                "operationId": "getSessionList",
                "parameters": [
                    {
                        "allowEmptyValue": true,
                        "in": "query",
                        "name": "inMemory",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "exclusiveMinimum": true,
                            "maximum": 9223372036854775807,
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "exclusiveMaximum": false,
                            "exclusiveMinimum": false,
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Paginated_Session"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `pageSize` or `page` or `inMemory`"
                    }
                },
                "summary": "Get the list of sessions"
            },
            "post": {
                "description": "Create a new session with the name provided in the request body, and return the new session's ID. Note that the new session's actual name may differ from the name provided in the body, if the requested name is invalid.",
                "operationId": "createSession",
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/NewSessionReq"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/UUID"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `body`"
                    }
                },
                "summary": "Create a new session and return its ID"
            }
        },
        "/openapi/sessions/{sessionId}": {
            "delete": {
                "operationId": "deleteSession",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Delete the specified session"
            }
        },
        "/openapi/sessions/{sessionId}/action/apply/input": {
            "post": {
                "operationId": "applyActionWithInput",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/InputAction"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplyActionBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Prog"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `action` or `body`"
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Apply an action with some additional input"
            }
        },
        "/openapi/sessions/{sessionId}/action/apply/simple": {
            "post": {
                "operationId": "applyAction",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/NoInputAction"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Selection"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Prog"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `action` or `body`"
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Apply a simple action i.e. one which requires no further input"
            }
        },
        "/openapi/sessions/{sessionId}/action/available": {
            "post": {
                "operationId": "getAvailableActions",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "level",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Level"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Selection"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Action"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `body` or `level`"
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Get available actions for the definition, or a node within it, sorted by priority"
            }
        },
        "/openapi/sessions/{sessionId}/action/options": {
            "post": {
                "operationId": "getActionOptions",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "level",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Level"
                        }
                    },
                    {
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "schema": {
                            "enum": [
                                "MakeCon",
                                "MakeInt",
                                "MakeChar",
                                "MakeVar",
                                "MakeVarSat",
                                "MakeLet",
                                "MakeLetRec",
                                "MakeLam",
                                "MakeLAM",
                                "RenamePattern",
                                "RenameLet",
                                "RenameLam",
                                "RenameLAM",
                                "MakeTCon",
                                "MakeTVar",
                                "MakeForall",
                                "RenameForall",
                                "RenameDef"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Selection"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Options"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `action` or `body` or `level`"
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Get the input options for an action"
            }
        },
        "/openapi/sessions/{sessionId}/def": {
            "post": {
                "operationId": "createDefinition",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "items": {
                                    "type": "string"
                                },
                                "minItems": 1,
                                "type": "array"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Prog"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `name` or `body`"
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Create a new definition"
            }
        },
        "/openapi/sessions/{sessionId}/eval": {
            "post": {
                "operationId": "eval-full",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "stepLimit",
                        "required": false,
                        "schema": {
                            "exclusiveMaximum": false,
                            "exclusiveMinimum": false,
                            "maximum": 100,
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/GlobalName"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvalFullResp"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `body` or `stepLimit`"
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Evaluate the named definition to normal form (or time out)"
            }
        },
        "/openapi/sessions/{sessionId}/name": {
            "get": {
                "operationId": "getSessionName",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": ""
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Get the specified session's name"
            },
            "put": {
                "description": "Attempt to set the current session name. Returns the actual new session name. (Note that this may differ from the name provided.)",
                "operationId": "setSessionName",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Set the specified session's name"
            }
        },
        "/openapi/sessions/{sessionId}/program": {
            "get": {
                "operationId": "getProgram",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Prog"
                                }
                            }
                        },
                        "description": ""
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Get the current program state"
            }
        },
        "/openapi/sessions/{sessionId}/redo": {
            "post": {
                "operationId": "redo",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Prog"
                                }
                            }
                        },
                        "description": ""
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Redo the last undo"
            }
        },
        "/openapi/sessions/{sessionId}/typedef": {
            "post": {
                "operationId": "createTypeDef",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTypeDefBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Prog"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Create a new type definition"
            }
        },
        "/openapi/sessions/{sessionId}/undo": {
            "post": {
                "operationId": "undo",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Prog"
                                }
                            }
                        },
                        "description": ""
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Undo the last action"
            }
        },
        "/openapi/version": {
            "get": {
                "operationId": "getVersion",
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Get the current server version"
            }
        }
    }
}