{
    "components": {
        "schemas": {
            "Def": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "term": {
                        "$ref": "#/components/schemas/Tree"
                    },
                    "type_": {
                        "$ref": "#/components/schemas/Tree"
                    }
                },
                "required": [
                    "name",
                    "type_"
                ],
                "type": "object"
            },
            "Module": {
                "properties": {
                    "defs": {
                        "items": {
                            "$ref": "#/components/schemas/Def"
                        },
                        "type": "array"
                    },
                    "editable": {
                        "type": "boolean"
                    },
                    "modname": {
                        "$ref": "#/components/schemas/ModuleName"
                    },
                    "types": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "modname",
                    "editable",
                    "types",
                    "defs"
                ],
                "type": "object"
            },
            "ModuleName": {
                "properties": {
                    "unModuleName": {
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "unModuleName"
                ],
                "type": "object"
            },
            "NodeBody": {
                "oneOf": [
                    {
                        "properties": {
                            "contents": {
                                "type": "string"
                            },
                            "tag": {
                                "enum": [
                                    "TextBody"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag",
                            "contents"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "contents": {
                                "$ref": "#/components/schemas/Tree"
                            },
                            "tag": {
                                "enum": [
                                    "BoxBody"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag",
                            "contents"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "tag": {
                                "enum": [
                                    "NoBody"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "tag"
                        ],
                        "type": "object"
                    }
                ],
                "type": "object"
            },
            "NodeFlavor": {
                "enum": [
                    "FlavorHole",
                    "FlavorEmptyHole",
                    "FlavorAnn",
                    "FlavorApp",
                    "FlavorAPP",
                    "FlavorCon",
                    "FlavorLam",
                    "FlavorLAM",
                    "FlavorGlobalVar",
                    "FlavorLocalVar",
                    "FlavorLet",
                    "FlavorLetType",
                    "FlavorLetrec",
                    "FlavorCase",
                    "FlavorPrimCon",
                    "FlavorTEmptyHole",
                    "FlavorTHole",
                    "FlavorTCon",
                    "FlavorTFun",
                    "FlavorTVar",
                    "FlavorTApp",
                    "FlavorTForall",
                    "FlavorPattern",
                    "FlavorPatternCon",
                    "FlavorPatternBind",
                    "FlavorPatternApp"
                ],
                "type": "string"
            },
            "PaginatedMeta": {
                "properties": {
                    "firstPage": {
                        "exclusiveMinimum": true,
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "lastPage": {
                        "exclusiveMinimum": true,
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "nextPage": {
                        "exclusiveMinimum": true,
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "pageSize": {
                        "exclusiveMinimum": true,
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "prevPage": {
                        "exclusiveMinimum": true,
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "thisPage": {
                        "exclusiveMinimum": true,
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "totalItems": {
                        "maximum": 9223372036854775807,
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "totalItems",
                    "pageSize",
                    "firstPage",
                    "thisPage",
                    "lastPage"
                ],
                "type": "object"
            },
            "Paginated_Session": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/Session"
                        },
                        "type": "array"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginatedMeta"
                    }
                },
                "required": [
                    "meta",
                    "items"
                ],
                "type": "object"
            },
            "Prog": {
                "properties": {
                    "modules": {
                        "items": {
                            "$ref": "#/components/schemas/Module"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "modules"
                ],
                "type": "object"
            },
            "Session": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UUID"
                    },
                    "name": {
                        "$ref": "#/components/schemas/SessionName"
                    }
                },
                "required": [
                    "id",
                    "name"
                ],
                "type": "object"
            },
            "SessionName": {
                "type": "string"
            },
            "Tree": {
                "properties": {
                    "body": {
                        "$ref": "#/components/schemas/NodeBody"
                    },
                    "childTrees": {
                        "items": {
                            "$ref": "#/components/schemas/Tree"
                        },
                        "type": "array"
                    },
                    "flavor": {
                        "$ref": "#/components/schemas/NodeFlavor"
                    },
                    "nodeId": {
                        "type": "string"
                    },
                    "rightChild": {
                        "$ref": "#/components/schemas/Tree"
                    }
                },
                "required": [
                    "nodeId",
                    "flavor",
                    "body",
                    "childTrees"
                ],
                "type": "object"
            },
            "UUID": {
                "example": "00000000-0000-0000-0000-000000000000",
                "format": "uuid",
                "type": "string"
            }
        }
    },
    "info": {
        "description": "A backend service implementing a pedagogic functional programming language.",
        "title": "Primer backend API",
        "version": "0.7"
    },
    "openapi": "3.0.0",
    "paths": {
        "/openapi/copy-session": {
            "post": {
                "description": "Copy the session whose ID is given in the request body to a new session, and return the new session's ID. Note that this method can be called at any time and is not part of the session-specific API, as it's not scoped by the current session ID like those methods are.",
                "operationId": "copySession",
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/UUID"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/UUID"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `body`"
                    }
                },
                "summary": "Copy a session to a new session"
            }
        },
        "/openapi/sessions": {
            "get": {
                "description": "Get a list of all sessions and their human-readable names. By default, this method returns the list of all sessions in the persistent database, but optionally it can return just the list of all sessions in memory, which is mainly useful for testing. Note that in a production system, this endpoint should obviously be authentication-scoped and only return the list of sessions that the caller is authorized to see.",
                "operationId": "getSessionList",
                "parameters": [
                    {
                        "allowEmptyValue": true,
                        "in": "query",
                        "name": "inMemory",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "exclusiveMinimum": true,
                            "maximum": 9223372036854775807,
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "exclusiveMinimum": true,
                            "maximum": 9223372036854775807,
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Paginated_Session"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `pageSize` or `page` or `inMemory`"
                    }
                },
                "summary": "Get the list of sessions"
            },
            "post": {
                "operationId": "createSession",
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/UUID"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Create a new session and return its ID"
            }
        },
        "/openapi/sessions/{sessionId}/name": {
            "get": {
                "operationId": "getSessionName",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": ""
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Get the specified session's name"
            },
            "put": {
                "description": "Attempt to set the current session name. Returns the actual new session name. (Note that this may differ from the name provided.)",
                "operationId": "setSessionName",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Set the specified session's name"
            }
        },
        "/openapi/sessions/{sessionId}/program": {
            "get": {
                "operationId": "getProgram",
                "parameters": [
                    {
                        "description": "The session ID",
                        "in": "path",
                        "name": "sessionId",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Prog"
                                }
                            }
                        },
                        "description": ""
                    },
                    "404": {
                        "description": "`sessionId` not found"
                    }
                },
                "summary": "Get the current program state"
            }
        },
        "/openapi/version": {
            "get": {
                "operationId": "getVersion",
                "responses": {
                    "200": {
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Get the current server version"
            }
        }
    }
}